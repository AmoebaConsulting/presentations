<section data-markdown>
## Structuring a multifaceted Backbone / Rails application
  * Extract common models for the logic and subclass based on the part of the App being visited
  * Keep only what you need for each side of the application, leveraging the Asset Pipeline
  * Make separate layouts for each side, specifying the top level JS file that has its includes
</section>

<section>
  <h2>Directory Structure</h2>
  <pre>
    <code>
app/assets/javascripts
  ├── admin.js
  ├── user.js
  ├── common.js
  └── app
      ├── apps
      │   ├── admin.js
      │   └── user.js
      ├── collections
      │   ├── admin
      │   ├── common
      │   │   └── base_collection.js
      │   └── user
      │       └── feed.js
      └── models
              ├── admin
              ├── common
              │   └── user.js
              └── user
                  └── post.js
    </code>
  </pre>

  <aside class="notes">
    <ul>
      <li>Usecases: multifacing application, larger, more easy to break apart, test</li>
      <li>Saves the user needing to download the whole thing if they are on different parts of the app</li>
    </ul>
  </aside>
</section>

<section>
  <h2>Directives</h2>
  <pre>
    <code>
//= require jquery
//= require bootstrap
//= require_self
//= require_tree ./app/models/common
//= require_tree ./app/collections/common

App = {
  Models: {},
  Collections: {}
};
    </code>
  </pre>
  <p>app/assets/javascripts/common.js</p>

  <pre>
    <code>
//= require common
//= require_tree ./app/models/user
//= require_tree ./app/collections/user
//= require app/apps/user
    </code>
  </pre>
  <p>app/assets/javascripts/user.js</p>

  <pre>
    <code>
<%%= content_for :assets do %>
  <%%= javascript_include_tag 'user' %>
<%% end %>
    </code>
  </pre>
  <p>app/views/layouts/user.html.erb</p>
</section>
